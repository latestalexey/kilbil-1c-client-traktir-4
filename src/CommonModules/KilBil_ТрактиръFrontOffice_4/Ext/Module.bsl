////////////////////////////////////////////////////////////////////////////////

// 
////
Функция АктивироватьКлиента(Параметры, Отказ) Экспорт 
	
	// Подготовка
	СтруктураЗапроса = Новый Структура;
	СтруктураЗапроса.Вставить("code",  Параметры.КодКарты);
	СтруктураЗапроса.Вставить("phone", Параметры.НомерТелефона); 

	// Запрос
	СтруктураОтвета = KilBil_БонуснаяСистема.АктивироватьКлиента(СтруктураЗапроса, Отказ);
	
	// Обработка результата
	Результат = Новый Структура;
	
	ОписаниеОшибки = "";
	
	Если Отказ Тогда
		Результат.Вставить("ОписаниеОшибки", СтруктураОтвета.ОписаниеОшибки);	
	Иначе		
		KilBil_БонуснаяСистема.ПроверитьОтветСервера(СтруктураОтвета.ОтветСервера, "activateclient", Отказ, ОписаниеОшибки);
		
		Результат.Вставить("ОписаниеОшибки", ОписаниеОшибки);
	КонецЕсли;
	
	Если Отказ Тогда
		KilBil_БонуснаяСистема.ЗаписатьВЖурналРегистрации(ОписаниеОшибки);	
	КонецЕсли; 
	
	Возврат Результат;
	
КонецФункции

//
////
Функция СоздатьКлиента(Параметры, Отказ) Экспорт 
	
	// Подготовка
	СтруктураЗапроса = Новый Структура;
	СтруктураЗапроса.Вставить("program_id",  Неопределено);
	СтруктураЗапроса.Вставить("code",  		 Параметры.КодКарты);
	СтруктураЗапроса.Вставить("phone", 		 Параметры.НомерТелефона);
	СтруктураЗапроса.Вставить("to_activate", Истина);

	// Запрос
	СтруктураОтвета = KilBil_БонуснаяСистема.СоздатьКлиента(СтруктураЗапроса, Отказ);
	
	// Обработка результата
	Результат = Новый Структура;
	
	ОписаниеОшибки = "";
	
	Если Отказ Тогда
		Результат.Вставить("ОписаниеОшибки", СтруктураОтвета.ОписаниеОшибки);	
	Иначе
		KilBil_БонуснаяСистема.ПроверитьОтветСервера(СтруктураОтвета.ОтветСервера, "createclient", Отказ, ОписаниеОшибки);
		
		Если Отказ Тогда
			Результат.Вставить("ОписаниеОшибки", ОписаниеОшибки);
		КонецЕсли; 
	КонецЕсли;
	
	Если Отказ Тогда
		KilBil_БонуснаяСистема.ЗаписатьВЖурналРегистрации(ОписаниеОшибки);	
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// 
////
Функция НайтиКлиента(Параметры, Отказ) Экспорт 
	
	// Подготовка
	СтруктураЗапроса = Новый Структура;
	СтруктураЗапроса.Вставить("mode", Параметры.ТипПоиска);
	СтруктураЗапроса.Вставить("text", Параметры.Значение);
	
	// Запрос
	СтруктураОтвета = KilBil_БонуснаяСистема.НайтиКлиента(СтруктураЗапроса, Отказ);
	
	// Обработка результата
	Результат = Новый Структура;
	
	ОписаниеОшибки = "";
	
	Если Отказ Тогда
		Результат.Вставить("ОписаниеОшибки", СтруктураОтвета.ОписаниеОшибки);	
	Иначе
		KilBil_БонуснаяСистема.ПроверитьОтветСервера(СтруктураОтвета.ОтветСервера, "searchclient", Отказ, ОписаниеОшибки);
		
		Если Отказ Тогда
			Результат.Вставить("ИДКлиента",  	 Неопределено);
			Результат.Вставить("СтатусКлиента",  Неопределено);
			Результат.Вставить("СтатусКарты", 	 Неопределено);
			Результат.Вставить("Фамилия", 		 "");
			Результат.Вставить("Имя", 			 "");
			Результат.Вставить("Отчество", 		 "");
			Результат.Вставить("ДатаРождения",   "");
			Результат.Вставить("ОписаниеОшибки", ОписаниеОшибки);
		Иначе
			Результат.Вставить("ИДКлиента",  	СтруктураОтвета.ОтветСервера._client_id);
			Результат.Вставить("СтатусКлиента", СтруктураОтвета.ОтветСервера._client_state);
			Результат.Вставить("СтатусКарты", 	СтруктураОтвета.ОтветСервера._card_state);
			Результат.Вставить("Фамилия", 		СокрЛП(СтруктураОтвета.ОтветСервера.last_name));
			Результат.Вставить("Имя", 			СокрЛП(СтруктураОтвета.ОтветСервера.first_name));
			Результат.Вставить("Отчество", 		СокрЛП(СтруктураОтвета.ОтветСервера.middle_name));
			Результат.Вставить("ДатаРождения",  СтруктураОтвета.ОтветСервера.birth_date);	
		КонецЕсли; 
	КонецЕсли;
	
	Если Отказ Тогда
		KilBil_БонуснаяСистема.ЗаписатьВЖурналРегистрации(ОписаниеОшибки);	
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// 
////
Функция ПолучитьБалансКлиента(Параметры, Отказ) Экспорт 
	
	// Подготовка
	СтруктураЗапроса = Новый Структура;
	СтруктураЗапроса.Вставить("time", Формат(ТекущаяДата(), "ДФ='yyyy-MM-dd ЧЧ:мм:сс'"));
	СтруктураЗапроса.Вставить("id",   Параметры.ИДКлиента); 

	// Запрос
	СтруктураОтвета = KilBil_БонуснаяСистема.ПолучитьБалансКлиента(СтруктураЗапроса, Отказ);
	
	// Обработка результата
	Результат = Новый Структура;
	
	ОписаниеОшибки = "";
	
	Если Отказ Тогда
		Результат.Вставить("ОписаниеОшибки", СтруктураОтвета.ОписаниеОшибки);	
	Иначе
		KilBil_БонуснаяСистема.ПроверитьОтветСервера(СтруктураОтвета.ОтветСервера, "getclientbalance", Отказ, ОписаниеОшибки);
		
		Если Отказ Тогда
			Результат.Вставить("Баланс", 		 0);
			Результат.Вставить("ОписаниеОшибки", ОписаниеОшибки);
		Иначе
			Результат.Вставить("Баланс", СтруктураОтвета.ОтветСервера._bonus_sum_termless);	
		КонецЕсли; 
	КонецЕсли;
	
	Если Отказ Тогда
		KilBil_БонуснаяСистема.ЗаписатьВЖурналРегистрации(ОписаниеОшибки);	
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// 
////
Функция ПолучитьМаксимальнуюСуммуСписания(Параметры, Отказ) Экспорт 
	
	// Подготовка
	СтруктураЗапроса = Новый Структура;
	СтруктураЗапроса.Вставить("time", Формат(ТекущаяДата(), "ДФ='yyyy-MM-dd ЧЧ:мм:сс'"));
	СтруктураЗапроса.Вставить("id",   Параметры.ИДКлиента);
	
	МассивСтрок = Новый Массив;
	
	Для Каждого СтрокаТабличнойЧасти Из Параметры.Документ.Товары Цикл
		Структура = Новый Структура;
		Структура.Вставить("num", 			   Строка(СтрокаТабличнойЧасти.НомерСтроки));
		Структура.Вставить("code", 			   СокрЛП(СтрокаТабличнойЧасти.Товар.Код));
		Структура.Вставить("name", 			   СокрЛП(СтрокаТабличнойЧасти.Товар.Наименование));
		Структура.Вставить("full_name", 	   СокрЛП(СтрокаТабличнойЧасти.Товар.Наименование));
		Структура.Вставить("quantity", 		   Строка(СтрокаТабличнойЧасти.Количество));
		Структура.Вставить("price", 		   Строка(СтрокаТабличнойЧасти.Цена));
		Структура.Вставить("total", 		   Строка(СтрокаТабличнойЧасти.Сумма));
		Структура.Вставить("discounted_price", Строка(СтрокаТабличнойЧасти.ЦенаРеализации));
		Структура.Вставить("discounted_total", Строка(СтрокаТабличнойЧасти.СуммаРеализации));		
		Структура.Вставить("is_certificate",   "0"); // ??

		МассивСтрок.Добавить(Структура);
	КонецЦикла;
	
	СтруктураЗапроса.Вставить("json", МассивСтрок);
	
	// Запрос
	СтруктураОтвета = KilBil_БонуснаяСистема.ПолучитьМаксимальнуюСуммуСписания(СтруктураЗапроса, Отказ);
	
	// Обработка результата
	Результат = Новый Структура;
	
	ОписаниеОшибки = "";
	
	Если Отказ Тогда
		Результат.Вставить("ОписаниеОшибки", СтруктураОтвета.ОписаниеОшибки);	
	Иначе
		//KilBil_БонуснаяСистема.ПроверитьОтветСервера(СтруктураОтвета.ОтветСервера, "getsumbonusout", Отказ, ОписаниеОшибки);
		KilBil_БонуснаяСистема.ПроверитьОтветСервера(СтруктураОтвета.ОтветСервера, "getsumbonusoutx", Отказ, ОписаниеОшибки); // ??
		
		Если Отказ Тогда
			Результат.Вставить("МаксимальнаяСуммаБонусов", 0);
			Результат.Вставить("МаксимальнаяСуммаЧека",    0);
			Результат.Вставить("ОписаниеОшибки", 		   ОписаниеОшибки);
		Иначе
			Результат.Вставить("МаксимальнаяСуммаБонусов", СтруктураОтвета.ОтветСервера._max_sum_bonus_out);
			Результат.Вставить("МаксимальнаяСуммаЧека",    СтруктураОтвета.ОтветСервера._max_bill_sum_bonus_out);
		КонецЕсли; 
	КонецЕсли;
	
	Если Отказ Тогда
		KilBil_БонуснаяСистема.ЗаписатьВЖурналРегистрации(ОписаниеОшибки);	
	КонецЕсли;
	
	Возврат Результат;	
	
КонецФункции

// 
////
Функция ОтправитьДокумент(Параметры, Отказ) Экспорт 
	
	// Подготовка
	СтруктураЗапроса = Новый Структура;
	СтруктураЗапроса.Вставить("time", 		 Формат(ТекущаяДата(), "ДФ='yyyy-MM-dd ЧЧ:мм:сс'"));
	СтруктураЗапроса.Вставить("id", 		 Параметры.ИДКлиента);
	СтруктураЗапроса.Вставить("bonusout", 	 Строка(Параметры.СуммаБонусов));
	СтруктураЗапроса.Вставить("maxbonusout", Строка(Параметры.МаксимальнаяСуммаЧека));
	
	Если ТипЗнч(Параметры.Документ) = Тип("ДокументСсылка.Заказ") ИЛИ
		 ТипЗнч(Параметры.Документ) = Тип("ДокументОбъект.Заказ") Тогда
		СтруктураЗапроса.Вставить("type", 		  "0");
		СтруктураЗапроса.Вставить("moveid", 	  СокрЛП(Параметры.Документ.Ссылка.УникальныйИдентификатор()));
		СтруктураЗапроса.Вставить("returnmoveid", "");
	Иначе
		СтруктураЗапроса.Вставить("type", 		  "1");
		СтруктураЗапроса.Вставить("moveid", 	  СокрЛП(Параметры.Документ.Ссылка.УникальныйИдентификатор()));
		СтруктураЗапроса.Вставить("returnmoveid", СокрЛП(Параметры.Документ.Заказ.Ссылка.УникальныйИдентификатор()));
	КонецЕсли; 
		
	МассивСтрок = Новый Массив;
	
	Для Каждого СтрокаТабличнойЧасти Из Параметры.Документ.Товары Цикл
		Структура = Новый Структура;
		Структура.Вставить("num", 		Строка(СтрокаТабличнойЧасти.НомерСтроки));
		Структура.Вставить("code", 		СокрЛП(СтрокаТабличнойЧасти.Товар.Код));
		Структура.Вставить("name", 		СокрЛП(СтрокаТабличнойЧасти.Товар.Наименование));
		Структура.Вставить("full_name", СокрЛП(СтрокаТабличнойЧасти.Товар.Наименование));
		Структура.Вставить("quantity", 	Строка(СтрокаТабличнойЧасти.Количество));
		Структура.Вставить("total", 	Строка(СтрокаТабличнойЧасти.Сумма));

		Если ТипЗнч(Параметры.Документ) = Тип("ДокументСсылка.Заказ") ИЛИ
		 	 ТипЗнч(Параметры.Документ) = Тип("ДокументОбъект.Заказ") Тогда
			Структура.Вставить("price", 		   Строка(СтрокаТабличнойЧасти.Цена));
			Структура.Вставить("discounted_price", Строка(СтрокаТабличнойЧасти.ЦенаРеализации));
			Структура.Вставить("discounted_total", Строка(СтрокаТабличнойЧасти.СуммаРеализации));
			Структура.Вставить("move_num",         "");
		Иначе
			Структура.Вставить("price", 		   Строка(СтрокаТабличнойЧасти.Сумма / СтрокаТабличнойЧасти.Количество));
			Структура.Вставить("discounted_price", Строка(СтрокаТабличнойЧасти.Сумма / СтрокаТабличнойЧасти.Количество));
			Структура.Вставить("discounted_total", Строка(СтрокаТабличнойЧасти.Сумма));
			Структура.Вставить("move_num",         Строка(СтрокаТабличнойЧасти.НомерСтрокиЗаказа));
		КонецЕсли;
		
		Структура.Вставить("is_certificate", "0"); // ??
		
		МассивСтрок.Добавить(Структура);
	КонецЦикла;
	
	СтруктураЗапроса.Вставить("json", МассивСтрок);
	
	// Запрос
	СтруктураОтвета = KilBil_БонуснаяСистема.ОтправитьДокумент(СтруктураЗапроса, Отказ);
	
	// Обработка результата
	Результат = Новый Структура;
	
	ОписаниеОшибки = "";
	
	Если Отказ Тогда
		Результат.Вставить("ОписаниеОшибки", СтруктураОтвета.ОписаниеОшибки);	
	Иначе
		//KilBil_БонуснаяСистема.ПроверитьОтветСервера(СтруктураОтвета.ОтветСервера, "processsale", Отказ, ОписаниеОшибки);
		KilBil_БонуснаяСистема.ПроверитьОтветСервера(СтруктураОтвета.ОтветСервера, "processsalex", Отказ, ОписаниеОшибки); // ??
		
		Если Отказ Тогда
			Результат.Вставить("СтруктураДокумента", Неопределено);
			
			Результат.Вставить("ОписаниеОшибки", ОписаниеОшибки);
		Иначе
			Результат.Вставить("СтруктураДокумента", СтруктураОтвета.ОтветСервера._bill_data);
		КонецЕсли; 
	КонецЕсли;
	
	Если Отказ Тогда
		KilBil_БонуснаяСистема.ЗаписатьВЖурналРегистрации(ОписаниеОшибки);	
	КонецЕсли;
	
	Возврат Результат;
		
КонецФункции

// 
////
Функция ЗакрытьДокумент(Параметры, Отказ) Экспорт 
	
	// Подготовка
	СтруктураЗапроса = Новый Структура;
	СтруктураЗапроса.Вставить("id", СокрЛП(Параметры.Документ.Ссылка.УникальныйИдентификатор()));
	
	// Запрос
	СтруктураОтвета = KilBil_БонуснаяСистема.ЗакрытьДокумент(СтруктураЗапроса, Отказ);
	
	// Обработка результата
	Результат = Новый Структура;
	
	ОписаниеОшибки = "";
	
	Если Отказ Тогда
		Результат.Вставить("ОписаниеОшибки", СтруктураОтвета.ОписаниеОшибки);	
	Иначе
		KilBil_БонуснаяСистема.ПроверитьОтветСервера(СтруктураОтвета.ОтветСервера, "confirmsale", Отказ, ОписаниеОшибки);
		
		Результат.Вставить("ОписаниеОшибки", ОписаниеОшибки);
	КонецЕсли;
	
	Если Отказ Тогда
		KilBil_БонуснаяСистема.ЗаписатьВЖурналРегистрации(ОписаниеОшибки);	
	КонецЕсли;
	
	Возврат Результат;
	
	
КонецФункции

// 
////
Функция ВыгрузитьНоменклатуру(Отказ) Экспорт 
	
	// Подготовка
	Запрос = Новый Запрос;
	Запрос.Текст = "
		|ВЫБРАТЬ
		|	Товары.Ссылка 			КАК Ссылка,
		|	Товары.ЭтоГруппа 		КАК ЭтоГруппа,
		|	Товары.ПометкаУдаления 	КАК ПометкаУдаления,
		|	Товары.Код 				КАК Код,
		|	Товары.Наименование 	КАК Наименование,
		|	Товары.Наименование 	КАК НаименованиеПолное,
		|	Товары.ЕдиницаИзмерения КАК ЕдиницаИзмерения
		|ИЗ
		|	Справочник.Товары КАК Товары
		|ГДЕ
		|	НЕ Товары.ЭтоГруппа
		|ИТОГИ ПО
		|	Ссылка ТОЛЬКО ИЕРАРХИЯ
		|";
	ВыборкаСИерархией = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией, "Ссылка");
	
	ДеревоЗначений = Новый ДеревоЗначений;
	ДеревоЗначений.Колонки.Добавить("Ссылка");
	ДеревоЗначений.Колонки.Добавить("ЭтоГруппа");
	ДеревоЗначений.Колонки.Добавить("ПометкаУдаления");
	ДеревоЗначений.Колонки.Добавить("Код");
	ДеревоЗначений.Колонки.Добавить("Наименование");
	ДеревоЗначений.Колонки.Добавить("НаименованиеПолное");
	ДеревоЗначений.Колонки.Добавить("ЕдиницаИзмерения");
	
	ВыбратьЭлементыВИерархии(ВыборкаСИерархией, ДеревоЗначений);	
	
	
	МассивЗапроса = Новый Массив;
	
	РекурсивныйОбходДереваЗначений(ДеревоЗначений.Строки, МассивЗапроса);
	
	// Запрос
	СтруктураОтвета = KilBil_БонуснаяСистема.ВыгрузитьНоменклатуру(МассивЗапроса, Отказ);
	
	// Обработка результата
	Результат = Новый Структура;
	
	ОписаниеОшибки = "";
	
	Если Отказ Тогда
		Результат.Вставить("ОписаниеОшибки", СтруктураОтвета.ОписаниеОшибки);	
	Иначе
		KilBil_БонуснаяСистема.ПроверитьОтветСервера(СтруктураОтвета.ОтветСервера, "goods", Отказ, ОписаниеОшибки);
		
		Если НЕ Отказ Тогда
			Результат.Вставить("Успешно", СтруктураОтвета.ОтветСервера.success);
		Иначе
			Результат.Вставить("ОписаниеОшибки", ОписаниеОшибки);
		КонецЕсли; 
	КонецЕсли;
	
	Если Отказ Тогда
		KilBil_БонуснаяСистема.ЗаписатьВЖурналРегистрации(ОписаниеОшибки);	
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции



////////////////////////////////////////////////////////////////////////////////

// 
////
Процедура РегламентноеЗадание_ВыгрузкаНоменклатуры() Экспорт 
	
	KilBil_ТрактиръFrontOffice_4.ВыгрузитьНоменклатуру(Ложь);

КонецПроцедуры



////////////////////////////////////////////////////////////////////////////////

// 
////
Процедура ДобавитьИнформациюПоБонуснойКарте(Действие, ТаблицаЗадания, Документ) Экспорт 
	
	Если ЗначениеЗаполнено(Документ.KilBil_ИДКлиента) Тогда
		Если Действие = "Пресчет" Тогда
			Отказ = Ложь;
			
			Результат = KilBil_ТрактиръFrontOffice_4.ПолучитьМаксимальнуюСуммуСписания(Новый Структура("ИДКлиента, Документ", Документ.KilBil_ИДКлиента, Документ), Отказ);
			
			Если Отказ Тогда
				ИнтерфейсРМ.ВопросПредупреждение("Ошибка", "", Результат.ОписаниеОшибки, "", "ОК", "");	
			КонецЕсли; 
			
			
			Задание = ТаблицаЗадания.Добавить();
			Задание.Данные    = "СтрЧерта";
			Задание.ТипДанных = "Строка";
			Задание.Параметры = "Лево,ПереводСтроки";
					
			Задание = ТаблицаЗадания.Добавить();
			Задание.Данные    = "Бонусная карта №" + ?(ЗначениеЗаполнено(Документ.KilBil_КодКарты), Документ.KilBil_КодКарты, Документ.KilBil_ИДКлиента);
			Задание.ТипДанных = "Строка";
			Задание.Параметры = "Лево,ПереводСтроки";
			
			Задание = ТаблицаЗадания.Добавить();
			Задание.Данные    = "Остаток баллов: " + Формат(Документ.KilBil_Баланс, "ЧДЦ=2; ЧРГ=.; ЧН=0.00");
			Задание.ТипДанных = "Строка";
			Задание.Параметры = "Лево,ПереводСтроки";
			
			Задание = ТаблицаЗадания.Добавить();
			Задание.Данные    = "Макс. сумма оплаты баллами: " + Формат(Мин(Документ.KilBil_Баланс, ?(ЗначениеЗаполнено(Результат), Число(Результат.МаксимальнаяСуммаБонусов), 0)), "ЧДЦ=2; ЧРГ=.; ЧН=0.00");
			Задание.ТипДанных = "Строка";
			Задание.Параметры = "Лево,ПереводСтроки";
			
			Задание = ТаблицаЗадания.Добавить();
			Задание.Данные    = "СтрЧерта";
			Задание.ТипДанных = "Строка";
			Задание.Параметры = "Лево,ПереводСтроки";
		ИначеЕсли Действие = "Счет" Тогда
			Задание = ТаблицаЗадания.Добавить();
			Задание.Данные    = "СтрЧерта";
			Задание.ТипДанных = "Строка";
			Задание.Параметры = "Лево,ПереводСтроки";
					
			Задание = ТаблицаЗадания.Добавить();
			Задание.Данные    = "Бонусная карта №" + ?(ЗначениеЗаполнено(Документ.KilBil_КодКарты), Документ.KilBil_КодКарты, Документ.KilBil_ИДКлиента);
			Задание.ТипДанных = "Строка";
			Задание.Параметры = "Лево,ПереводСтроки";
			
			Задание = ТаблицаЗадания.Добавить();
			Задание.Данные    = "Списано баллов: " + Формат(Документ.KilBil_Списано, "ЧДЦ=2; ЧРГ=.; ЧН=0.00");
			Задание.ТипДанных = "Строка";
			Задание.Параметры = "Лево,ПереводСтроки";
			
			Задание = ТаблицаЗадания.Добавить();
			Задание.Данные    = "Начислено баллов: " + Формат(Документ.KilBil_Начислено, "ЧДЦ=2; ЧРГ=.; ЧН=0.00");
			Задание.ТипДанных = "Строка";
			Задание.Параметры = "Лево,ПереводСтроки";
			
			Задание = ТаблицаЗадания.Добавить();
			Задание.Данные    = "Остаток баллов: " + Формат(Документ.KilBil_Баланс - Документ.KilBil_Списано + Документ.KilBil_Начислено, "ЧДЦ=2; ЧРГ=.; ЧН=0.00");
			Задание.ТипДанных = "Строка";
			Задание.Параметры = "Лево,ПереводСтроки";
			
			Задание = ТаблицаЗадания.Добавить();
			Задание.Данные    = "СтрЧерта";
			Задание.ТипДанных = "Строка";
			Задание.Параметры = "Лево,ПереводСтроки";
		Иначе 
			// ?? 
		КонецЕсли;	
	КонецЕсли; 	
	
КонецПроцедуры

// 
////
Процедура РекурсивныйОбходДереваЗначений(СтрокиДерева, РодительскийМассив) 
	
	Для Каждого СтрокаДерева Из СтрокиДерева Цикл
		Если СтрокаДерева.ЭтоГруппа = NULL Тогда
			РекурсивныйОбходДереваЗначений(СтрокаДерева.Строки, РодительскийМассив);
			
			Продолжить;
		КонецЕсли;
		
		Структура = Новый Структура;
		Структура.Вставить("id", 		  СокрЛП(СтрокаДерева.Ссылка.УникальныйИдентификатор()));
		Структура.Вставить("is_group",    СтрокаДерева.ЭтоГруппа);
		Структура.Вставить("delete_mark", СтрокаДерева.ПометкаУдаления);
		Структура.Вставить("code", 		  СокрЛП(СтрокаДерева.Код));
		Структура.Вставить("name", 		  СокрЛП(СтрокаДерева.Наименование));
		Структура.Вставить("full_name",   СокрЛП(СтрокаДерева.НаименованиеПолное));
		Структура.Вставить("unit", 		  СокрЛП(СтрокаДерева.ЕдиницаИзмерения));
		
		Если СтрокаДерева.ЭтоГруппа = Истина Тогда
			Массив = Новый Массив;
			
			РекурсивныйОбходДереваЗначений(СтрокаДерева.Строки, Массив);
			
			Структура.Вставить("inside", Массив);	
		КонецЕсли;
		
		РодительскийМассив.Добавить(Структура);
	КонецЦикла;
	
КонецПроцедуры

// 
////
Процедура ВыбратьЭлементыВИерархии(ВыборкаСИерархией, ДеревоЗначений) 
	
    Пока ВыборкаСИерархией.Следующий() Цикл
        Если ВыборкаСИерархией.ТипЗаписи() = ТипЗаписиЗапроса.ИтогПоИерархии Тогда
            СтрокаДереваЗначений = ДеревоЗначений.Строки.Добавить();
            СтрокаДереваЗначений.Ссылка 			= ВыборкаСИерархией.Ссылка;
			СтрокаДереваЗначений.ЭтоГруппа 			= ВыборкаСИерархией.ЭтоГруппа;
			СтрокаДереваЗначений.ПометкаУдаления	= ВыборкаСИерархией.ПометкаУдаления;
			СтрокаДереваЗначений.Код				= ВыборкаСИерархией.Код;
			СтрокаДереваЗначений.Наименование		= ВыборкаСИерархией.Наименование;
			СтрокаДереваЗначений.НаименованиеПолное	= ВыборкаСИерархией.НаименованиеПолное;
			СтрокаДереваЗначений.ЕдиницаИзмерения	= ВыборкаСИерархией.ЕдиницаИзмерения;
			
            ВыбратьЭлементыВИерархии(ВыборкаСИерархией.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией, "Ссылка"), СтрокаДереваЗначений);
        ИначеЕсли ВыборкаСИерархией.ТипЗаписи() = ТипЗаписиЗапроса.ИтогПоГруппировке Тогда
			Если НЕ ЗначениеЗаполнено(ВыборкаСИерархией.Ссылка) ИЛИ 
				 ТипЗнч(ДеревоЗначений) = Тип("СтрокаДереваЗначений") И 
				 ВыборкаСИерархией.Ссылка = ДеревоЗначений.Ссылка Тогда
				ВыбратьЭлементыБезИерархии(ВыборкаСИерархией.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам), ДеревоЗначений);
            Иначе
				СтрокаДереваЗначений = ДеревоЗначений.Строки.Добавить();
				СтрокаДереваЗначений.Ссылка 			= ВыборкаСИерархией.Ссылка;
				СтрокаДереваЗначений.ЭтоГруппа 			= ВыборкаСИерархией.ЭтоГруппа;
				СтрокаДереваЗначений.ПометкаУдаления	= ВыборкаСИерархией.ПометкаУдаления;
				СтрокаДереваЗначений.Код				= ВыборкаСИерархией.Код;
				СтрокаДереваЗначений.Наименование		= ВыборкаСИерархией.Наименование;
				СтрокаДереваЗначений.НаименованиеПолное	= ВыборкаСИерархией.НаименованиеПолное;
				СтрокаДереваЗначений.ЕдиницаИзмерения	= ВыборкаСИерархией.ЕдиницаИзмерения;
				
                ВыбратьЭлементыБезИерархии(ВыборкаСИерархией.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам), СтрокаДереваЗначений);
            КонецЕсли;
        КонецЕсли;   
    КонецЦикла;
КонецПроцедуры

// 
////
Процедура ВыбратьЭлементыБезИерархии(ВыборкаБезИерархии, ДеревоЗначений) 
	
	Пока ВыборкаБезИерархии.Следующий() Цикл
        СтрокаДереваЗначений = ДеревоЗначений.Строки.Добавить();
        СтрокаДереваЗначений.Ссылка 			= ВыборкаБезИерархии.Ссылка;
		СтрокаДереваЗначений.ЭтоГруппа 			= ВыборкаБезИерархии.ЭтоГруппа;
		СтрокаДереваЗначений.ПометкаУдаления	= ВыборкаБезИерархии.ПометкаУдаления;
		СтрокаДереваЗначений.Код				= ВыборкаБезИерархии.Код;
		СтрокаДереваЗначений.Наименование		= ВыборкаБезИерархии.Наименование;
		СтрокаДереваЗначений.НаименованиеПолное	= ВыборкаБезИерархии.НаименованиеПолное;
		СтрокаДереваЗначений.ЕдиницаИзмерения	= ВыборкаБезИерархии.ЕдиницаИзмерения;
	КонецЦикла;
	
КонецПроцедуры
